import time
def forfib(n): #function fibonacci sequence using for loop
               #input: n, non-negative integer
               #output: list of n + 1 fib. numbers (n nontrivial numbers)
    if isinstance(n, int) == 1 and n >= 0:          #checks that n is non-negative integer
        if n == 0:                                  #trivial case
            return [0]                              # list of one trivial fib. number
        elif n == 1:                                # other trivial case
             return forfib [0, 1]                   # list of first two fib. numbers
        else: #non-trivial case n >= 2
            forfib = [0, 1] + [0 for i in range(n - 1)]         # concatenate first two fib. numbers w/ list of (n - 1) zeros
            for i in range(2, n + 1):                  # for i from zero to n - 2
                forfib[i] = forfib[i - 1] + forfib[i - 2]       # the next fib. number is the sum of the previous two
            return forfib
    else:                                           # only executes if user inputs invalid 'n'
        print("n must be a non-negative integer") 
elapse = [0 for i in range(100)]

for i in range(100):
  start = time.time()
  forfib(30)
  end = time.time()
  elapse[i] = end - start
  print(elapse[i])
 print(elapse)
 
 9.059906005859375e-06
7.152557373046875e-06
5.245208740234375e-06
4.5299530029296875e-06
4.0531158447265625e-06
4.291534423828125e-06
4.0531158447265625e-06
4.291534423828125e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.291534423828125e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.291534423828125e-06
6.9141387939453125e-06
4.0531158447265625e-06
4.291534423828125e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
4.5299530029296875e-06
4.291534423828125e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.291534423828125e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.291534423828125e-06
4.0531158447265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
4.5299530029296875e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.291534423828125e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06
4.0531158447265625e-06
4.0531158447265625e-06
3.814697265625e-06
3.814697265625e-06
4.0531158447265625e-06
3.814697265625e-06

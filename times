0.402129414
0.42090964399999997
0.402026652
0.424571753
0.41352009700000003
0.43233537899999996
0.41713953000000004
0.383749487
0.392539741
0.395969632
0.444291828
0.401287083
0.42520022299999993
0.41175842500000004
0.416214703
0.41407609
0.392387152
0.435241938
0.45687150899999995
0.41683721500000004
0.417001246
0.38782143599999996
0.39082884500000004
0.381311419
0.387810942
0.390775918
0.400588513
0.40249538500000004
0.793173314
0.44349193499999995
0.414214372
0.387295722
0.38299536700000003
0.384783745
0.42787098599999995
0.390036344
0.38529825500000003
0.39456248
0.40960359700000004
0.413226603
0.401469231
0.388352631
0.412119627
0.42130208300000005
0.397741079
0.456968785
0.37730455500000004
0.413664341
0.40010261599999997
0.41454768
0.40703511200000003
0.41090607900000004
0.41434836399999997
0.47238564499999997
0.44352650699999996
0.428074834
0.41137719
0.38846588000000004
0.416107895
0.682637692
0.453532454
0.41241168800000005
0.40180349400000004
0.395866155
0.393755434
0.401043176
0.376779317
0.37921714900000003
0.385850671
0.395993711
0.430912734
0.443388225
0.416074752
0.41490984099999995
0.396648883
0.398859502
0.38012099099999996
0.382421492
0.38154840599999995
0.38615799
0.392215253
0.794127706
0.44334983800000005
0.394012214
0.38493919099999996
0.39868211600000003
0.449481488
0.453128577
0.405574559
0.41234111900000003
0.397116899
0.40416574400000005
0.396772386
0.438126803
0.7455656509999999
0.40088915799999997
0.41378808100000003
0.40094757000000003
0.420800686
0.387688396

# the output of the following code on a dell computer 11th gen Intel(R) Core i7-1185G7 @ 3.00GHz 1.80 GHz, 16 GB ram
import time
def recfib(n):
    #function calculating nth fib. number using recursion
    #input: non-negative integer n
    #ouput: the nth non-trivial fib. number
    if isinstance(n, int) == 1 and n >= 0:    #executes only for non-negative integers
        if n == 0:    #base case 0
            return 0
        elif n == 1:  #base case 1
            return 1
        else:         #non-trivial case, n >= 2
            return recfib(n - 1) + recfib(n - 2)    #recursion, sum of the previous two function values
    else:
        print("n must be a non-negative integer")

def listrecfib(n):
                                        # function calculating list of first n fib. numbers
                                        # input: length of list
                                        # output 1: list of n fib. numbers, x
                                        # output 2: list of times to calculate, elapse
    x = [0] * n           # initalize fibonacci list
    start = [0] * n       # initalize start time list
    end = [0] * n         # initalize end time list
    elapse = [0] * n      # initalize elapse time list, elapse = end - start
    for i in range(1, n) :           # start loop rangeing from
        start[i] = time.time()          # ith start time
        x[i] = recfib(i)                # recfib function call
        end[i] = time.time()            # ith end time
        elapse[i] = end[i] - start[i]   # ith elapsed time
        elapse[i] = round(elapse[i], 9) # round elapsed time
    elapse_total = sum(elapse)                # add all ith elapses = total time elapsed
    return x, elapse, elapse_total            # exit loop, return fiboacci list x and time elapsed
   
for i in range(100):
    print(listrecfib(30)[2])
